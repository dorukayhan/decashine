/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.3")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    implementation("net.sourceforge.argparse4j:argparse4j:0.9.0")
    implementation("jakarta.json:jakarta.json-api:2.1.2")
    implementation("org.eclipse.parsson:parsson:1.1.4") // why is the json parser split across two artifacts
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(20))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("io.github.dorukayhan.decashine.App")
}

// WHY DO I HAVE TO SPECIFY ALL THIS ðŸ˜­
val sob = java.manifest {
    attributes("Main-Class" to "io.github.dorukayhan.decashine.App")
}

tasks.jar {
    manifest = java.manifest { from(sob) }
}

// fwcd.kotlin freaks out if I just type Jar for some reason
tasks.register<org.gradle.api.tasks.bundling.Jar>("uberJar") {
    archiveClassifier.set("uber")

    from(sourceSets.main.get().output)

    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it).matching {
            // skip module-info.class, poms in meta-inf, etc
            exclude { it.name.contains("module-info") || it.path.contains("META-INF") }
        }}
    })

    manifest = java.manifest { from(sob) }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
